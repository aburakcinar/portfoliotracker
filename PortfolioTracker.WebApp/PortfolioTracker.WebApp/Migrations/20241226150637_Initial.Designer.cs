// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioTracker.WebApp.DataStore;

#nullable disable

namespace PortfolioTracker.WebApp.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20241226150637_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "TRY",
                            Name = "Turk Lirasi",
                            Symbol = "₺"
                        },
                        new
                        {
                            Code = "USD",
                            Name = "United States Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        });
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Holding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PortfolioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TransactionGroupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockId");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StockExchange")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f99512b6-324d-4e13-b75a-19e9301f1565"),
                            Description = "",
                            Name = "TÜPRAŞ-Türkiye Petrol Rafinerileri",
                            StockExchange = "XIST",
                            Symbol = "TUPRS"
                        },
                        new
                        {
                            Id = new Guid("1cc7e8b4-f4f0-4cf5-bdb7-a9947f98c55a"),
                            Description = "",
                            Name = "Doğuş Otomotiv",
                            StockExchange = "XIST",
                            Symbol = "DOAS"
                        },
                        new
                        {
                            Id = new Guid("a242dc19-adc4-4c8f-a827-416fd8a391b4"),
                            Description = "",
                            Name = "Enerjisa",
                            StockExchange = "XIST",
                            Symbol = "ENJSA"
                        },
                        new
                        {
                            Id = new Guid("44829b63-9b2c-4153-ad4d-b194aa5625b6"),
                            Description = "",
                            Name = "Ereğli Demir ve Çelik Fabrikaları",
                            StockExchange = "XIST",
                            Symbol = "EREGL"
                        },
                        new
                        {
                            Id = new Guid("5163feb7-5ceb-4d65-8bfb-64bcad4f370e"),
                            Description = "",
                            Name = "Ford Otosan",
                            StockExchange = "XIST",
                            Symbol = "FROTO"
                        },
                        new
                        {
                            Id = new Guid("b37a0f69-d398-4cec-a460-2835a06ba6bc"),
                            Description = "",
                            Name = "Türkiye Garanti Bankası",
                            StockExchange = "XIST",
                            Symbol = "GARAN"
                        },
                        new
                        {
                            Id = new Guid("64eaa2bd-80ab-46a8-9eb3-3112ac1e73b1"),
                            Description = "",
                            Name = "İş Yatırım Menkul Değerler",
                            StockExchange = "XIST",
                            Symbol = "ISMEN"
                        },
                        new
                        {
                            Id = new Guid("7f28b900-27eb-4f4a-856a-1e1618ee59ac"),
                            Description = "",
                            Name = "Türk Hava Yolları",
                            StockExchange = "XIST",
                            Symbol = "THYAO"
                        },
                        new
                        {
                            Id = new Guid("f7c5e6c8-78a5-4325-ba93-e5f451483866"),
                            Description = "",
                            Name = "Tekfen Holding",
                            StockExchange = "XIST",
                            Symbol = "TKFEN"
                        },
                        new
                        {
                            Id = new Guid("b2aa0d1f-f511-4940-a118-38dc6b93b5d1"),
                            Description = "",
                            Name = "Vestel Beyaz Eşya",
                            StockExchange = "XIST",
                            Symbol = "VESBE"
                        },
                        new
                        {
                            Id = new Guid("7a46d600-2cc6-4e45-ab74-876064839746"),
                            Description = "",
                            Name = "Türk Traktör ve Ziraat Makineleri",
                            StockExchange = "XIST",
                            Symbol = "TTRAK"
                        });
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InOut")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("TransactionGroupId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionGroupId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.TransactionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("TransactionGroups");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Holding", b =>
                {
                    b.HasOne("PortfolioTracker.WebApp.DataStore.Portfolio", null)
                        .WithMany("Holdings")
                        .HasForeignKey("PortfolioId");

                    b.HasOne("PortfolioTracker.WebApp.DataStore.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioTracker.WebApp.DataStore.TransactionGroup", "TransactionGroup")
                        .WithMany()
                        .HasForeignKey("TransactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("TransactionGroup");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Portfolio", b =>
                {
                    b.HasOne("PortfolioTracker.WebApp.DataStore.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Transaction", b =>
                {
                    b.HasOne("PortfolioTracker.WebApp.DataStore.TransactionGroup", null)
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionGroupId");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.Portfolio", b =>
                {
                    b.Navigation("Holdings");
                });

            modelBuilder.Entity("PortfolioTracker.WebApp.DataStore.TransactionGroup", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
