import { Form, Formik, Field, FieldProps, ErrorMessage } from "formik";
import React, { useState } from "react";
import * as Yup from "yup";
import { ICreateStockItemRequest } from "../../Api/StockItemApi";
import {
  AutoComplete,
  AutoCompleteCompleteEvent,
} from "primereact/autocomplete";
import { InputText } from "primereact/inputtext";
import { InputTextarea } from "primereact/inputtextarea";
import { IExchangeQueryModel, searchExchangesApi } from "../../Api/ExchangeApi";
import { useAppDispatch } from "../../Store/RootState";
import { createStockItem } from "../../Store/StocksSlice";
import { ILocaleQueryModel, searchLocalesApi } from "../../Api/LocaleApi";

export interface IStockAddUpdateFormProps {}

const StockItemSchema = Yup.object({
  name: Yup.string().required("Stock name is required."),
  symbol: Yup.string().required("Stock symbol is required."),
  //   stockExchangeCode: Yup.string().required(
  //     "Stock exchange selection is required."
  //   ),
});

interface IStockAddEditModel {
  stockExchange: IExchangeQueryModel[];
  symbol: string;
  name: string;
  description: string;
  locale?: ILocaleQueryModel;
  webSite: string;
}

const initialValue: IStockAddEditModel = {
  stockExchange: [],
  symbol: "FROTO",
  name: "Ford Otomotiv Sanayi",
  description:
    "Ford Otomotiv Sanayi A.S. engages in the manufacture, assembling, import, export, and sale of " +
    "motor vehicles and spare parts primarily in Turkey. It offers commercial vehicles, passenger cars, " +
    "and spare parts; transit and transit custom, and transit courier vehicles; and trucks, as well as " +
    "engines and powertrain products. Ford Otomotiv Sanayi A.S. was founded in 1926 and is headquartered in Istanbul, Turkey.",
  locale: undefined,
  webSite: "http://www.fordotosan.com.tr",
};

export const StockAddUpdateForm: React.FC<IStockAddUpdateFormProps> = (
  props
) => {
  const dispatch = useAppDispatch();

  const [filteredExchanges, setFilteredExchanges] = useState<
    IExchangeQueryModel[]
  >([]);
  const [filteredLocales, setFilteredLocales] = useState<ILocaleQueryModel[]>(
    []
  );

  const searchExchangeHandler = async ($event: AutoCompleteCompleteEvent) => {
    const searchText = $event.query.trim();

    if (searchText.length === 0) {
      setFilteredExchanges([]);
    } else {
      const result = await searchExchangesApi($event.query.trim());

      setFilteredExchanges(
        result.map((x) => {
          return {
            ...x,
            placeholder: `${x.countryCode} - ${x.mic} - ${x.marketNameInstitutionDescription}`,
          };
        })
      );
    }
  };

  const exchangeItemTemplate = (item: IExchangeQueryModel) => {
    return (
      <div className="flex flex-col">
        <div className="text-sm">{item.marketNameInstitutionDescription}</div>
        <div className="text-xs">
          {item.mic} - <span className="italic">{item.city}</span>
        </div>
      </div>
    );
  };

  const searchLocaleHandler = async ($event: AutoCompleteCompleteEvent) => {
    const searchText = $event.query.trim();

    if (searchText.length === 0) {
      setFilteredLocales([]);
    } else {
      const result = await searchLocalesApi($event.query.trim(), 10);

      setFilteredLocales(
        result.map((x) => {
          return {
            ...x,
            placeholder: `${x.countryCode} - ${x.currencyCode} - ${x.countryName}`,
          };
        })
      );
    }
  };

  const localeItemTemplate = (item: ILocaleQueryModel) => {
    return (
      <div className="flex flex-col">
        <div className="text-sm">
          {item.countryCode} - {item.countryName}{" "}
        </div>
        <div className="text-xs">
          {item.currencySymbol} -{" "}
          <span className="italic">{item.currencyCode}</span>
        </div>
      </div>
    );
  };

  return (
    <Formik
      initialValues={initialValue}
      validationSchema={StockItemSchema}
      onSubmit={(values, { setSubmitting }) => {
        console.log(values);
        if (values.stockExchange.length !== 1 || !values.locale) {
          return;
        }

        const { stockExchange, symbol, name, description, locale, webSite } =
          values;

        const createRequest: ICreateStockItemRequest = {
          stockExchangeCode: stockExchange[0].mic,
          symbol,
          name,
          description,
          localeCode: locale.localeCode,
          webSite,
        };

        console.log(createRequest);

        dispatch(createStockItem(createRequest));
      }}
    >
      {({ isSubmitting }) => (
        <Form>
          <div className="flex w-full flex-col">
            <div className="text-green text-2xl mb-5">New Stock</div>
            <div className="flex flex-col ">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Stock Exchange
              </label>
              <Field name="stockExchange">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <AutoComplete
                    className="w-full h-12"
                    field="placeholder"
                    {...field}
                    suggestions={filteredExchanges}
                    completeMethod={searchExchangeHandler}
                    itemTemplate={exchangeItemTemplate}
                    delay={500}
                    multiple
                    selectionLimit={1}
                  />
                )}
              </Field>
              <ErrorMessage
                name="password"
                component="div"
                className="text-red-500 text-xs mt-1"
              />
            </div>

            <div className="flex flex-col ">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Locale
              </label>
              <Field name="locale">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <AutoComplete
                    className="w-full h-12"
                    field="placeholder"
                    {...field}
                    suggestions={filteredLocales}
                    completeMethod={searchLocaleHandler}
                    itemTemplate={localeItemTemplate}
                    delay={500}
                  />
                )}
              </Field>
            </div>

            <div className="flex flex-col my-2">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Stock Symbol
              </label>
              <Field name="symbol">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <InputText {...field} className="h-12" />
                )}
              </Field>
              <ErrorMessage
                name="symbol"
                component="div"
                className="text-red-500 text-xs mt-1"
              />
            </div>

            <div className="flex flex-col my-2">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Stock Name
              </label>
              <Field name="name">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <InputText {...field} className="h-12" />
                )}
              </Field>
              <ErrorMessage
                name="name"
                component="div"
                className="text-red-500 text-xs mt-1"
              />
            </div>

            <div className="flex flex-col my-2">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Website
              </label>
              <Field name="webSite">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <InputText {...field} className="h-12" />
                )}
              </Field>
              <ErrorMessage
                name="website"
                component="div"
                className="text-red-500 text-xs mt-1"
              />
            </div>

            <div className="flex flex-col my-2">
              <label className="w-full py-1 text-xs dark:text-white text-black">
                Description
              </label>
              <Field name="description">
                {({ field, form: { touched, errors }, meta }: FieldProps) => (
                  <InputTextarea {...field} className="h-36" />
                )}
              </Field>
              <ErrorMessage
                name="description"
                component="div"
                className="text-red-500 text-xs mt-1"
              />
            </div>

            <div className="flex my-2">
              <div className="grow"></div>
              <button
                className="grow-0 bg-green hover:bg-green/60 text-white px-5 py-2 "
                type="submit"
                // disabled={isSubmitting}
              >
                Save
              </button>
            </div>
          </div>
        </Form>
      )}
    </Formik>
  );
};
